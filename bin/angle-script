#!/usr/bin/env node
"use strict";
const crossSpawn = require("cross-spawn");

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// 获取命令行参数
// 第一个参数是node环境
// 第二个参数是当前路径
// 第三个参数开始的地方才是用户自定义的参数
const args = process.argv.slice(2);

const supportScripts = ["build", "dev", "start", "client"];

const scriptIndex = args.findIndex((x) => supportScripts.includes(x));

const execScript = scriptIndex === -1 ? args[0] : args[scriptIndex];

const nodeArgs = scriptIndex > 0 ? args.slice(0, scriptIndex) : [];

if (supportScripts.includes(execScript)) {
  const execScriptPath = require.resolve(`../internals/scripts/${execScript}`);

  const result = crossSpawn.sync(
    "node",
    nodeArgs.concat(execScriptPath).concat(args.slice(scriptIndex + 1)),
    { stdio: "inherit" }
  );

  if (result.signal) {
    if (result.signal === "SIGKILL") {
      console.log(
        "The build failed because the process exited too early. " +
          "This probably means the system ran out of memory or someone called " +
          "`kill -9` on the process."
      );
    } else if (result.signal === "SIGTERM") {
      console.log(
        "The build failed because the process exited too early. " +
          "Someone might have called `kill` or `killall`, or the system could " +
          "be shutting down."
      );
    }
    process.exit(1);
  }
  process.exit(result.status);
} else {
  console.log('Unknown script "' + execScript + '".');
  console.log("Perhaps you need to update angle-scripts?");
  console.log("See: xxx");
}
